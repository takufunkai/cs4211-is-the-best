// Match Data is from 
//       ***** 
// 	    Player1 
// de_ct  mid  ad_ct  
// -----+-----+----- 
// |    |     |    | 
// | 1  |  2  | 3  | 
// |    |     |    | 
// -----------------  
// |    |     |    | 
// | 4  |  5  | 6  | service boxes 
// |    |     |    | 
// |===============| 
// |    |     |    | 
// | 7  |  8  | 9  | service boxes 
// |    |     |    | 
// ----------------- 
// |    |     |    | 
// | 10 |  11 | 12 | 
// |    |     |    | 
// -----+-----+----- 
// ad_ct  mid  de_ct 
// 	    Player2
//       ***** 
// 13 will be considered a fault/error/failure to return the shot 
 
enum{p1_ad_ct, p1_de_ct, p2_ad_ct, p2_de_ct}; //serve position: ad court or deuce court 
enum{player1, player2, na}; 
 
var turn = na; //serve turn; 
var p1score = 0;  
var p2score = 0; 
var won = na; 
var ball = 9; 
var points = 7; //end score 
 
#define p0 54; 
#define p1 4; 
#define p2 46; 
#define p3 10; 
#define p4 67; 
#define p5 4; 
#define p6 23; 
#define p7 31; 
#define p8 1; 
#define p9 8; 
#define p10 40; 
#define p11 6; 
#define p12 46; 
#define p13 9; 
#define p14 57; 
#define p15 23; 
#define p16 16; 
#define p17 12; 
#define p18 0; 
#define p19 6; 
#define p20 12; 
#define p21 5; 
#define p22 44; 
#define p23 1; 
#define p24 24; 
#define p25 10; 
#define p26 0; 
#define p27 2; 
#define p28 32; 
#define p29 0; 
#define p30 8; 
#define p31 3; 
#define p32 2; 
#define p33 4; 
#define p34 36; 
#define p35 0; 
#define p36 11; 
#define p37 36; 
#define p38 2; 
#define p39 26; 
#define p40 0; 
#define p41 15; 
#define p42 121; 
#define p43 75; 
#define p44 78; 
#define p45 0; 
#define p46 0; 
#define p47 0; 
#define p48 16; 
#define p49 51; 
#define p50 117; 
#define p51 104; 
#define p52 54; 
#define p53 48; 
#define p54 76; 
#define p55 90; 
#define p56 41; 
#define p57 45; 
#define p58 21; 
#define p59 8; 
#define p60 6; 
#define p61 196; 
#define p62 75; 
#define p63 162; 
#define p64 29; 
#define p65 58; 
#define p66 30; 
#define p67 4; 
#define p68 50; 
#define p69 18; 
#define p70 67; 
#define p71 9; 
#define p72 23; 
#define p73 26; 
#define p74 4; 
#define p75 5; 
#define p76 40; 
#define p77 4; 
#define p78 33; 
#define p79 15; 
#define p80 66; 
#define p81 7; 
#define p82 12; 
#define p83 36; 
#define p84 1; 
#define p85 10; 
#define p86 21; 
#define p87 4; 
#define p88 37; 
#define p89 1; 
#define p90 17; 
#define p91 16; 
#define p92 1; 
#define p93 5; 
#define p94 40; 
#define p95 0; 
#define p96 12; 
#define p97 3; 
#define p98 4; 
#define p99 7; 
#define p100 51; 
#define p101 1; 
#define p102 16; 
#define p103 23; 
#define p104 4; 
#define p105 35; 
#define p106 2; 
#define p107 5; 
#define p108 133; 
#define p109 52; 
#define p110 108; 
#define p111 0; 
#define p112 0; 
#define p113 0; 
#define p114 20; 
#define p115 63; 
#define p116 85; 
#define p117 77; 
#define p118 61; 
#define p119 41; 
#define p120 116; 
#define p121 80; 
#define p122 35; 
#define p123 34; 
#define p124 6; 
#define p125 7; 
#define p126 2; 
#define p127 246; 
#define p128 45; 
#define p129 161; 
#define p130 17; 
#define p131 57; 
 
TieBreakGame = WhoServe1st; (Player1Serve [] Player2Serve); 
WhoServe1st = []i:{p1_de_ct,p2_de_ct}@ TossCoin{turn = i} -> Skip; 
Player1Serve = [won == na && turn == p1_de_ct ]Player1Ready_DeCt -> De_Ply1Serve [] [won == na && turn == p1_ad_ct] Player1Ready_AdCt -> Ad_Ply1Serve; 
Player2Serve = [won == na && turn == p2_de_ct]Player1Ready_DeCt -> De_Ply2Serve [] [ won == na && turn == p2_ad_ct] Player2Ready_AdCt -> Ad_Ply2Serve; 
NextPt = Player1Serve [] Player2Serve [] ([won != na] GameOver -> Skip); 
 
// player 1 serving from 1, will always serve to 8 or 9 
De_Ply1Serve = pcase {                              
			p0: ServeT_in{ball=8} -> Ply2_ForeHandR   
			p1: ServeBody_in{ball=9} -> (Ply2_BackHandR [] Ply2_ForeHandR) 
			p2: ServeWide_in{ball=9} -> Ply2_BackHandR  
			p3: Serve_winner{ball=13} -> FWinner{p1score++; if (p1score == points) {won = player1}  
      		                                                        else { turn = (turn+1)%4} }-> NextPt 
			p4: Serve_err{ball=13} -> De_Ply1Serve_2nd};  
 
De_Ply1Serve_2nd = pcase {                 //1st serve is out 
			p5: ServeT_in{ball=8} -> Ply2_ForeHandR   
			p6: ServeBody_in{ball=9} -> (Ply2_BackHandR [] Ply2_ForeHandR) 
			p7: ServeWide_in{ball=9} -> Ply2_BackHandR  
			p8: Serve_winner{ball=13} -> FWinner{p1score++; if (p1score == points) {won = player1}  
      		                                                        else { turn = (turn+1)%4} }-> NextPt 
			p9: Serve_err{ball=13} -> Fdoublefault{p2score++; if (p2score == points) {won = player2}  
      		                                                        else { turn = (turn+1)%4} }-> NextPt 
     		 }; 
 
// player 1 serving from 3, will always serve to 7 or 8 
Ad_Ply1Serve = pcase { 
			p10: ServeT_in{ball=8} -> Ply2_BackHandR   
			p11: ServeBody_in{ball=7} -> (Ply2_BackHandR [] Ply2_ForeHandR) 
			p12: ServeWide_in{ball=7} -> Ply2_ForeHandR 
			p13: Serve_winner{ball=13} -> FWinner{p1score++; if (p1score == points) {won = player1}  
      		                                                        else { turn = (turn+1)%4} }-> NextPt 
			p14: Serve_err{ball=13} -> Ad_Ply1Serve_2nd};  
 
Ad_Ply1Serve_2nd = pcase {                 //1st serve is out 
			p15: ServeT_in{ball=8} -> Ply2_BackHandR   
			p16: ServeBody_in{ball=7} -> (Ply2_BackHandR [] Ply2_ForeHandR) 
			p17: ServeWide_in{ball=7} -> Ply2_ForeHandR 
			p18: Serve_winner{ball=13} -> FWinner{p1score++; if (p1score == points) {won = player1}  
      		                                                        else { turn = (turn+1)%4} }-> NextPt 
			p19: Serve_err{ball=13} -> Fdoublefault{p2score++; if (p2score == points) {won = player2}  
      		                                                        else { turn = (turn+1)%4} }-> NextPt 
     		 };     
     		  
Ply1_ForeHandR = ifa (turn == p2_de_ct) {    // Player 1 forehand return to Player 2's serve from the deuce court side 
		 pcase { 
			p20: FH_InsideOut{ball=9} -> Ply2_de_stroke
			p20: FH_InsideOut{ball=12} -> Ply2_de_stroke
			p21: FH_InsideIn{ball=7} -> Ply2_ad_stroke
			p21: FH_InsideIn{ball=10} -> Ply2_ad_stroke 
			p22: FH_CrossCourt{ball=7} -> Ply2_ad_stroke
			p22: FH_CrossCourt{ball=10} -> Ply2_ad_stroke
			p22: FH_DownMid{ball=8} -> Ply2_mid_stroke 
			p22: FH_DownMid{ball=11} -> Ply2_mid_stroke 
			p23: FH_Winner{ball=13} -> {p1score++; if (p1score == points) {won = player1}  
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
			p24: FH_Error{ball=13} -> {p2score++; if (p2score == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
      		 }} 
      		 else {  // Player 1 forehand return to Player 2's serve from the ad court side 
      		pcase { 
			p25: FH_CrossCourt{ball=7} -> Ply2_ad_stroke 
			p25: FH_CrossCourt{ball=10} -> Ply2_ad_stroke 
			p26: FH_DownLine{ball=9} -> Ply2_de_stroke 
			p26: FH_DownLine{ball=12} -> Ply2_de_stroke 
      p28: FH_DownMid{ball=8} -> Ply2_mid_stroke 
			p28: FH_DownMid{ball=11} -> Ply2_mid_stroke 
			p29: FH_Winner{ball=13} -> {p1score++; if (p1score == points) {won = player1}  
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
			p30: FH_Error{ball=13} -> {p2score++; if (p2score == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
      		 }}; 
 
Ply1_BackHandR = ifa (turn == p2_de_ct) {    // Player 1 backhand return to Player 2's serve from the deuce court side 
		 pcase { 
			p31: BH_CrossCourt{ball=9} -> Ply2_de_stroke 
			p31: BH_CrossCourt{ball=11} -> Ply2_de_stroke 
			p32: BH_DownLine{ball=7} -> Ply2_ad_stroke
			p32: BH_DownLine{ball=10} -> Ply2_ad_stroke
			p33: BH_DownMid{ball=8} -> Ply2_mid_stroke
			p33: BH_DownMid{ball=11} -> Ply2_mid_stroke
			p35: BH_Winner{ball=13} -> {p1score++; if (p1score == points) {won = player1}  
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
			p36: BH_Error{ball=13} -> {p2score++; if (p2score == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
      		 }} 
      		 else {     // Player 1 backhand return to Player 2's serve from the ad court side 
      		pcase { 
			p36: BH_CrossCourt{ball=9} -> Ply2_de_stroke
			p36: BH_CrossCourt{ball=12} -> Ply2_de_stroke
			p37: BH_InsideIn{ball=9} -> Ply2_de_stroke
			p37: BH_InsideIn{ball=12} -> Ply2_de_stroke
			p38: BH_InsideOut{ball=7} -> Ply2_ad_stroke
			p38: BH_InsideOut{ball=10} -> Ply2_ad_stroke
			p39: BH_DownMid{ball=8} -> Ply2_mid_stroke
			p39: BH_DownMid{ball=11} -> Ply2_mid_stroke
			p40: BH_Winner{ball=13} -> {p1score++; if (p1score == points) {won = player1}  
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
			p41: BH_Error{ball=13} -> {p2score++; if (p2score == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
      		 }}; 
 
// deuce stroke is when player1 hit position is 1 
Ply1_de_stroke = pcase{ 
			p42: FH_InsideOut{ball=9} -> Ply2_de_stroke
			p42: FH_InsideOut{ball=12} -> Ply2_de_stroke
			p43: FH_InsideIn{ball=7} -> Ply2_ad_stroke
			p43: FH_InsideIn{ball=10} -> Ply2_ad_stroke
			p44: FH_DownMid{ball=8} -> Ply2_mid_stroke
			p44: FH_DownMid{ball=11} -> Ply2_mid_stroke
			p45: BH_Crosscourt{ball=9} -> Ply2_de_stroke
			p45: BH_Crosscourt{ball=12} -> Ply2_de_stroke
			p46: BH_Downline{ball=7} -> Ply2_ad_stroke
			p46: BH_Downline{ball=10} -> Ply2_ad_stroke
			p47: BH_DownMid{ball=8} -> Ply2_mid_stroke			 
			p47: BH_DownMid{ball=11} -> Ply2_mid_stroke			 
			p48: Winner{ball=13} -> {p1score++; if (p1score == points) {won = player1}  
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
			p49: Error{ball=13} -> {p2score++; if (p2score == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt   
	}; 
	 
// mid stroke is when player1 hit position is 2 
Ply1_mid_stroke = pcase{ 
			p50: FH_InsideOut{ball=9} -> Ply2_de_stroke
			p50: FH_InsideOut{ball=12} -> Ply2_de_stroke
			p51: FH_Crosscourt{ball=7} -> Ply2_ad_stroke
			p51: FH_Crosscourt{ball=10} -> Ply2_ad_stroke
			p52: FH_DownMid{ball=8} -> Ply2_mid_stroke
			p52: FH_DownMid{ball=11} -> Ply2_mid_stroke
			p53: BH_InsideOut{ball=7} -> Ply2_ad_stroke
			p53: BH_InsideOut{ball=10} -> Ply2_ad_stroke
			p54: BH_Crosscourt{ball=9} -> Ply2_de_stroke
			p54: BH_Crosscourt{ball=12} -> Ply2_de_stroke
			p55: BH_DownMid{ball=8} -> Ply2_mid_stroke
			p55: BH_DownMid{ball=11} -> Ply2_mid_stroke
			p56: Winner{ball=13} -> {p1score++; if (p1score == points) {won = player1}  
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
			p57: Error{ball=13} -> {p2score++; if (p2score == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt     
	}; 


// ad stroke is when player1 hit position is 3 
Ply1_ad_stroke = pcase{ 
			p58: FH_Crosscourt{ball=7} -> Ply2_ad_stroke
			p58: FH_Crosscourt{ball=10} -> Ply2_ad_stroke
			p59: FH_Downline{ball=9} -> Ply2_de_stroke
			p59: FH_Downline{ball=12} -> Ply2_de_stroke
			p60: FH_DownMid{ball=8} -> Ply2_mid_stroke
			p60: FH_DownMid{ball=11} -> Ply2_mid_stroke
			p61: BH_InsideIn{ball=9} -> Ply2_de_stroke
			p61: BH_InsideIn{ball=12} -> Ply2_de_stroke
			p62: BH_InsideOut{ball=7} -> Ply2_ad_stroke
			p62: BH_InsideOut{ball=10} -> Ply2_ad_stroke
			p63: BH_DownMid{ball=8} -> Ply2_mid_stroke
			p63: BH_DownMid{ball=11} -> Ply2_mid_stroke
			p64: Winner{ball=13} -> {p1score++; if (p1score == points) {won = player1}  
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
			p65: Error{ball=13} -> {p2score++; if (p2score == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt   
	}; 
 
// player 2 serving from 12, will always serve to 4 or 5 
De_Ply2Serve = pcase { 
			p66 : ServeT_in{ball=5} -> Ply1_ForeHandR 
			p67: ServeBody_in{ball=4} -> (Ply1_ForeHandR [] Ply1_BackHandR) 
			p68: ServeWide_in{ball=4} -> Ply1_BackHandR 
			p69: Serve_Winner{ball=13} -> NWinner{p2score++; if (p2score == points) {won = player2}  
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
			p70: Serve_err{ball=13} -> De_Ply2Serve_2nd};  
 
De_Ply2Serve_2nd = pcase {                 //1st serve is out 
			p71: ServeT_in{ball=5} -> Ply1_ForeHandR 
			p72: ServeBody_in{ball=4} -> (Ply1_ForeHandR [] Ply1_BackHandR) 
			p73: ServeWide_in{ball=4} -> Ply1_BackHandR 
			p74: Serve_Winner{ball=13} -> NWinner{p2score++; if (p2score == points) {won = player2}  
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
			p75: Serve_err{ball=13} -> Ndoublefault{p1score++; if (p1score == points) {won = player1}  
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
     		 }; 
     		  
// player 2 serving from 10, will always serve to 5 or 6 
Ad_Ply2Serve = pcase { 
			p76: ServeT_in{ball=5} -> Ply1_BackHandR 
			p77: ServeBody_in{ball=6} -> (Ply1_ForeHandR [] Ply1_BackHandR) 
			p78: ServeWide_in{ball=6} -> Ply1_ForeHandR 
			p79: Serve_Winner{ball=13} -> NWinner{p2score++; if (p2score == points) {won = player2}  
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
			p80: Serve_err{ball=13} -> Ad_Ply2Serve_2nd};  

 
Ad_Ply2Serve_2nd = pcase {                 //1st serve is out 
			p81: ServeT_in{ball=5} -> Ply1_BackHandR 
			p82: ServeBody_in{ball=6} -> (Ply1_ForeHandR [] Ply1_BackHandR) 
			p83: ServeWide_in{ball=6} -> Ply1_ForeHandR 
			p84: Serve_Winner{ball=13} -> NWinner{p2score++; if (p2score == points) {won = player2}  
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
			p85: Serve_err{ball=13} -> Ndoublefault{p1score++; if (p1score == points) {won = player1}  
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
     		 }; 
     		  
Ply2_ForeHandR = ifa (turn == p1_de_ct) {    // Player2 forehand return to Player1 serve from the deuce court side 
		  pcase { 
			p86: FH_InsideOut{ball = 1} -> Ply1_de_stroke
			p86: FH_InsideOut{ball = 4} -> Ply1_de_stroke
			p87: FH_InsideIn{ball = 3} -> Ply1_ad_stroke
			p87: FH_InsideIn{ball = 6} -> Ply1_ad_stroke
			p88: FH_CrossCourt{ball = 3} -> Ply1_ad_stroke
			p88: FH_CrossCourt{ball = 6} -> Ply1_ad_stroke
			p89: FH_DownMid{ball = 2} -> Ply1_mid_stroke
			p89: FH_DownMid{ball = 5} -> Ply1_mid_stroke
			p89: FH_Winner{ball=13} -> {p2score++; if (p2score == points) {won = player2}  
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
			p90: FH_Error{ ball=13} -> {p1score++; if (p1score == points) {won = player1}  
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
      		 }} 
      		 else { // Player2 forehand return to Player1 serve from the ad court 
      		pcase { 
   		p92: FH_CrossCourt{ball = 3} -> Ply1_ad_stroke
   		p92: FH_CrossCourt{ball = 6} -> Ply1_ad_stroke
			p93: FH_DownLine{ball = 1} -> Ply1_de_stroke
			p93: FH_DownLine{ball = 4} -> Ply1_de_stroke
			p94: FH_DownMid{ ball = 2} -> Ply1_mid_stroke
			p94: FH_DownMid{ ball = 5} -> Ply1_mid_stroke
			p95: FH_Winner{ball=13} -> {p2score++; if (p2score == points) {won = player2}  
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
			p96: FH_Error{ ball = 13} -> {p1score++; if (p1score == points) {won = player1}  
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
      		 }}; 
      		  
Ply2_BackHandR = ifa (turn == p1_de_ct) {    // Player2 backhand return to Player1 serve from the deuce court side 
			pcase { 
			p97: BH_CrossCourt{ball = 1} -> Ply1_de_stroke
			p97: BH_CrossCourt{ball = 4} -> Ply1_de_stroke
			p98: BH_DownLine{ball = 3} -> Ply1_ad_stroke
			p98: BH_DownLine{ball = 6} -> Ply1_ad_stroke
			p99: BH_DownMid{ball = 2} -> Ply1_mid_stroke
			p99: BH_DownMid{ball = 5} -> Ply1_mid_stroke
			p101: BH_Winner{ball=13} -> {p2score++; if (p2score == points) {won = player2}  
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
			p102: BH_Error{ball=13} -> {p1score++; if (p1score == points) {won = player1}  
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
      		 }} 
      		 else { 
      		pcase { 
			p102: BH_CrossCourt{ball = 1} -> Ply1_de_stroke
			p102: BH_CrossCourt{ball = 4} -> Ply1_de_stroke
			p103: BH_InsideIn{ball = 1} -> Ply1_de_stroke
			p103: BH_InsideIn{ball = 4} -> Ply1_de_stroke
			p104: BH_InsideOut{ball = 3} -> Ply1_ad_stroke
			p104: BH_InsideOut{ball = 6} -> Ply1_ad_stroke
			p105: BH_DownMid{ball = 2} -> Ply1_mid_stroke
			p105: BH_DownMid{ball = 5} -> Ply1_mid_stroke
			p106: BH_Winner{ball=13} -> {p2score++; if (p2score == points) {won = player2}  
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
			p107: BH_Error{ball=13} -> {p1score++; if (p1score == points) {won = player1}  
      		                                                     else { turn = (turn+1)%4} }-> NextPt			 
      		 }}; 
 

// deuce stroke is when player2 hit position is 12 
Ply2_de_stroke = pcase { // if already  
			p108: FH_InsideOut {ball = 1} -> Ply1_de_stroke
			p108: FH_InsideOut {ball = 4} -> Ply1_de_stroke
			p109: FH_insideIn {ball = 3} -> Ply1_ad_stroke
			p109: FH_insideIn {ball = 6} -> Ply1_ad_stroke
			p110: FH_DownMid {ball = 2} -> Ply1_mid_stroke
			p110: FH_DownMid {ball = 5} -> Ply1_mid_stroke
			p111: BH_Crosscourt {ball = 1} -> Ply1_de_stroke
			p111: BH_Crosscourt {ball = 4} -> Ply1_de_stroke
			p112: BH_Downline {ball = 3} -> Ply1_ad_stroke
			p112: BH_Downline {ball = 6} -> Ply1_ad_stroke
			p113: BH_DownMid {ball = 2} -> Ply1_mid_stroke
			p113: BH_DownMid {ball = 4} -> Ply1_mid_stroke
			p114: Winner{ball=13} -> {p2score++; if (p2score == points) {won = player2}  
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
			p115: Error {ball=13} -> {p1score++; if (p1score == points) {won = player1}  
      		                                                     else { turn = (turn+1)%4} }-> NextPt  
	}; 
 
// mid stroke is when player2 hit position is 11 
Ply2_mid_stroke = noMove -> pcase{ 
			p116: FH_InsideOut {ball = 1} -> Ply1_de_stroke
			p116: FH_InsideOut {ball = 4} -> Ply1_de_stroke
			p117: FH_Crosscourt{ball = 3} -> Ply1_ad_stroke
			p117: FH_Crosscourt{ball = 6} -> Ply1_ad_stroke
			p118: FH_DownMid {ball = 2} -> Ply1_mid_stroke
			p118: FH_DownMid {ball = 5} -> Ply1_mid_stroke
			p119: BH_InsideOut {ball = 3} -> Ply1_ad_stroke
			p119: BH_InsideOut {ball = 6} -> Ply1_ad_stroke
			p120: BH_Crosscourt {ball = 1} -> Ply1_de_stroke
			p120: BH_Crosscourt {ball = 4} -> Ply1_de_stroke
			p121: BH_DownMid {ball = 2} -> Ply1_mid_stroke
			p121: BH_DownMid {ball = 5} -> Ply1_mid_stroke
			p122: Winner{ball=13} -> {p2score++; if (p2score == points) {won = player2}  
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
			p123: Error {ball=13} -> {p1score++; if (p1score == points) {won = player1}  
      		                                                     else { turn = (turn+1)%4} }-> NextPt  
	}; 
 
// ad stroke is when player 2 hit position is 10 
Ply2_ad_stroke = pcase{ 
			p124: FH_Crosscourt {ball = 3} -> Ply1_ad_stroke
			p124: FH_Crosscourt {ball = 6} -> Ply1_ad_stroke
			p125: FH_Downline {ball = 1} -> Ply1_de_stroke
			p125: FH_Downline {ball = 4} -> Ply1_de_stroke
			p126: FH_DownMid {ball = 2} -> Ply1_mid_stroke
			p126: FH_DownMid {ball = 5} -> Ply1_mid_stroke
			p127: BH_InsideIn {ball = 1} -> Ply1_de_stroke
			p127: BH_InsideIn {ball = 4} -> Ply1_de_stroke
			p128: BH_InsideOut {ball = 3} -> Ply1_ad_stroke
			p128: BH_InsideOut {ball = 6} -> Ply1_ad_stroke
			p129: BH_DownMid {ball = 2} -> Ply1_mid_stroke
			p129: BH_DownMid {ball = 5} -> Ply1_mid_stroke
			p130: Winner{ball=13} -> {p2score++; if (p2score == points) {won = player2}  
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
			p131: Error {ball=13} -> {p1score++; if (p1score == points) {won = player1}  
      		                                                     else { turn = (turn+1)%4} }-> NextPt  
	};    		              
 
#define player1Win won == player1; 
#assert TieBreakGame reaches player1Win with prob;